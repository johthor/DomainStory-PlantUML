'' DomainStory-PlantUML
''
'' Use PlantUML to describe and document a domain story which was developed in a
'' Domain Storytelling workshop.
''
'' Author: Johannes Thorn
'' Version: 0.4.0
'' Source: https://github.com/johthor/DomainStory-PlantUML
''

'' Use `-darkmode -DPUML_MODE=dark` to activate the support for PlantUML dark mode
!ifdef PUML_MODE
    !global $PUML_MODE ?= PUML_MODE
!else
    !global $PUML_MODE ?= "light"
!endif

'' Use `-DDST_PUML_ENTITY_NAMES=dynamic` to activate the dynamic naming feature
!ifdef DST_PUML_ENTITY_NAMES
    !global $DST_PUML_ENTITY_NAMES ?= DST_PUML_ENTITY_NAMES
!else
    !global $DST_PUML_ENTITY_NAMES ?= "static"
!endif

!global $DST_PUML_ELEMENT_SEPARATOR ?= "+"
!global $DST_PUML_COMPONENT_SEPARATOR ?= ":"

' Version
' ##################################

!function DomainStoryVersion()
    ' This is method is directly copied from C4-PlantUML and only slightly adjusted
    ' 2 spaces are used as a unique marker, that the release script makes the correct version update
    !global $DomainStoryVersion  =  "0.4.0"
    !return $DomainStoryVersion
!end function

' Logging Utilities
' ##################################

!procedure $debug($message)
    !if LOG_LEVEL == "debug"
        !log [DEBUG] $message
    !endif
!endprocedure

' Entity Creation Utilities
' ##################################

/' Creates a colorized sprite
Params:
    $sprite:   the sprite for the image
    $scale:    the scale for the sprite
    $color:    the color for the sprite '/
!function $pumlSprite($sprite, $scale = 1, $color = "")
    !if $color
        !return "<" + $sprite + "{scale=" + $scale + ",color=" + $color + "}>"
    !else
        !return "<" + $sprite + "{scale=" + $scale + "}>"
    !endif
!endfunction

/' Creates an aliased entity with a colorized sprite, label, and stereotype
Params:
    $type:         the entity type (e.g. component, node, agent, etc.)
    $label:        the label to display under the sprite
    $alias:        the alias to give the entity
    $sprite:       the sprite for the image representing the entity
    $scale:        the scale for the sprite
    $color:        the color for the sprite
    $stereo:       the stereotype, which can define additional styling
    $background:   the background color '/
!procedure $pumlEntity($type, $label, $alias, $sprite = "", $scale = 1, $color = "", $stereo = "", $background = "")
    !if $sprite
$type "$pumlSprite($sprite, $scale, $color)\r##$label" as $alias $stereo $background
    !else
$type "$label" as $alias $stereo $background
    !endif
!endprocedure

' Various Auxiliary Utilities
' ##################################

!function $computeStereotypes($kind, $tag, $all = %true())
    !if $kind
        !if $tag
            !if $all
                !return "<<" + $kind + ":" + $tag + ">><<" + $kind + ">><<" + $tag + ">>"
            !else
                !return "<<" + $kind + ":" + $tag + ">>"
            !endif
        !else
            !return "<<" + $kind + ">>"
        !endif
    !else
        !if $tag
            !return "<<" + $tag + ">>"
        !else
            !return ""
        !endif
    !endif
!endfunction

!function $decideVariableName($context, $tag, $property)
    !if $tag
        !return "$" + $context + "_" + $tag + "_" + $property
    !else
        !return "$" + $context + "_" + $property
    !endif
!endfunction

' Story Layout
' ##################################

!global $Story_Layout ?= "left-to-right"

!if $Story_Layout == "left-to-right" || $Story_Layout == "landscape"
    !global $Story_Layout = "left-to-right"
    left to right direction
!else
    top to bottom direction
!endif

' Styling
' ##################################

!function modeAdjustedColor($lightColor, $darkColor = "")
    !if $PUML_MODE == "light"
        !$result = $lightColor
    !else
        !if $darkColor
            !$result = $darkColor
        !else
            !$result = %reverse_color($lightColor)
        !endif
    !endif
    $debug(PUML_MODE + " mode with input color " + $lightColor + " and output color " + $result)
    !return $result
!endfunction

!function $setStyleProperty($property, $value, $context, $tag = "", $themeable = %false(), $force = %false())
    !$variableName = $decideVariableName($context, $tag, $property)

    !if %not($force) && %variable_exists($variableName)
        !return %get_variable_value($variableName)
    !else
        !if %not($force) && $themeable
            !ifdef $THEME
                !$value = ""
            !endif
        !endif

        !if $value
            %set_variable_value($variableName, $value)
            $debug("declared " + $variableName + " with value [" + $value + "]")
            !return $value
        !else
            %set_variable_value($variableName, "")
            $debug("declared " + $variableName + " with empty value")
            !return ""
        !endif
    !endif
!endfunction

!function $getStyleProperty($value, $element, $kind, $tag, $property)
    !if $value
        !return $value
    !endif

    ' Check tagged properties according to hierarchy first
    !$value = %get_variable_value($decideVariableName($kind, $tag, $property))
    !if $value
        !return $value
    !endif

    !$value = %get_variable_value($decideVariableName($element, $tag, $property))
    !if $value
        !return $value
    !endif

    !$value = %get_variable_value($decideVariableName(Element, $tag, $property))
    !if $value
        !return $value
    !endif

    ' Check untagged properties according to hierarchy
    !$value = %get_variable_value($decideVariableName($kind, "", $property))
    !if $value
        !return $value
    !endif

    !$value = %get_variable_value($decideVariableName($element, "", $property))
    !if $value
        !return $value
    !endif

    !return %get_variable_value($decideVariableName(Element, "", $property))
!endfunction

!procedure $activateStyleProperty($property, $element, $value = "", $kind = "", $tag = "")
    !$variableName = $decideVariableName($element, $tag, "Shape")
    !$shape = %get_variable_value($variableName)
    $debug("found shape [" + $shape + "] in " + $variableName)

    !if $shape == ""
        !$variableName = $decideVariableName($element, "", "Shape")
        !$shape = %get_variable_value($decideVariableName($element, "", "Shape"))
        $debug("found shape [" + $shape + "] in " + $variableName)
    !endif

    !$stereotype = $computeStereotypes($kind, $tag, %false())

    !if $value
        !if $shape
            skinparam $shape##$property##$stereotype $value
        !else
            skinparam $element##$property##$stereotype $value
        !endif
    !endif
!endprocedure

!procedure $declareStyleProperty($fallbackValue, $property, $context, $value = "", $kind = "", $tag = "", $themeable = %false(), $skinParam = %true())
    !if $value
        !$newValue = $value
    !else
        !$newValue = $fallbackValue
    !endif

    !if $kind
        !$propertyValue = $setStyleProperty($property, $newValue, $kind, $tag, $themeable)
    !else
        !$propertyValue = $setStyleProperty($property, $newValue, $context, $tag, $themeable)
    !endif
    !if $skinParam && ($value != $fallbackValue)
        $activateStyleProperty($property, $context, $propertyValue, $kind, $tag)
    !endif
!endprocedure

!procedure $extendStyleProperty($property, $element, $kind, $themeable = %false(), $skinParam = %true())
    !$fallbackValue = %get_variable_value($decideVariableName($element, "", $property))
    $declareStyleProperty($fallbackValue, $property, $element, $fallbackValue, $kind, "", $themeable, $skinParam)
!endprocedure

!procedure $extendStyleDeclarations($element, $kind, $icon)
    $extendStyleProperty(Shape, $element, $kind, $themeable = %false(), $skinParam = %false())
    $extendStyleProperty(IconScale, $element, $kind, $themeable = %false(), $skinParam = %false())
    $extendStyleProperty(IconColor, $element, $kind, $themeable = %true(), $skinParam = %false())

    !$variableName = $decideVariableName($kind, "", "IconName")
    !if $icon
        !if %not(%variable_exists($variableName))
            !include <material/$icon>
            %set_variable_value($variableName, "$ma_" + $icon)
        !endif
    !else
        %set_variable_value($variableName, "")
    !endif

    $extendStyleProperty(FontColor, $element, $kind, $themeable = %true())
    $extendStyleProperty(FontName, $element, $kind, $themeable = %true())
    $extendStyleProperty(FontSize, $element, $kind, $themeable = %true())
    $extendStyleProperty(FontStyle, $element, $kind, $themeable = %true())
    $extendStyleProperty(TextAlignment, $element, $kind, $themeable = %true())

    $extendStyleProperty(BackgroundColor, $element, $kind, $themeable = %true())
    $extendStyleProperty(BorderStyle, $element, $kind, $themeable = %true())
    $extendStyleProperty(BorderColor, $element, $kind, $themeable = %true())
    $extendStyleProperty(BorderThickness, $element, $kind, $themeable = %true())
    $extendStyleProperty(RoundCorner, $element, $kind, $themeable = %true())
    $extendStyleProperty(Shadowing, $element, $kind, $themeable = %true())
!endprocedure

' Customize Style Declarations
' ##################################

!procedure customizeStyleProperty($value, $property, $context,  $kind = "", $tag = "", $skinParam = %true())
    !if $kind
        !$propertyValue = $setStyleProperty($property, $value, $kind, $tag, %false(), %true())
    !else
        !$propertyValue = $setStyleProperty($property, $value, $context, $tag, %false(), %true())
    !endif
    !if $skinParam
        $activateStyleProperty($property, $context, $propertyValue, $kind, $tag)
    !endif
!endprocedure

' Global Style declarations
' ##################################

' Element Styles
' ==================================

!global $Element_Shape = Default

$declareStyleProperty("", FontColor, Element, modeAdjustedColor("#0B0C10"), $themeable = %true())
$declareStyleProperty("", FontName, Element, "Arial, Helvetica, SansSerif", $themeable = %true())
$declareStyleProperty("", FontSize, Element, 12, $themeable = %true())
$declareStyleProperty("", FontStyle, Element, normal, $themeable = %true())
$declareStyleProperty("", TextAlignment, Element, center, $themeable = %true())

$declareStyleProperty("", BackgroundColor, Element, "none", $themeable = %true())
$declareStyleProperty("", BorderStyle, Element, "none", $themeable = %true())
$declareStyleProperty("", BorderColor, Element, "none", $themeable = %true())
$declareStyleProperty("", BorderThickness, Element, 1, $themeable = %true())
$declareStyleProperty("", RoundCorner, Element, 0, $themeable = %true())
$declareStyleProperty("", Shadowing, Element, false, $themeable = %true(), $skinParam = %false())

hide stereotypes
!ifndef $THEME
    skinparam Shadowing $Element_Shadowing
!endif

' Actor Styles
' ==================================

$declareStyleProperty("", Shape, Actor, Agent, $themeable = %false(), $skinParam = %false())

$declareStyleProperty("", IconStyle, Actor, "outline", $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", IconScale, Actor, 1, $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", IconColor, Actor, modeAdjustedColor("#1f2833"), $themeable = %true(), $skinParam = %false())

$declareStyleProperty($Element_FontColor, FontColor, Actor, $themeable = %true())
$declareStyleProperty($Element_FontName, FontName, Actor, $themeable = %true())
$declareStyleProperty($Element_FontSize, FontSize, Actor, $themeable = %true())
$declareStyleProperty($Element_FontStyle, FontStyle, Actor, $themeable = %true())
$declareStyleProperty($Element_TextAlignment, TextAlignment, Actor, $themeable = %true())

$declareStyleProperty($Element_BackgroundColor, BackgroundColor, Actor, $themeable = %true())
$declareStyleProperty($Element_BorderStyle, BorderStyle, Actor, $themeable = %true())
$declareStyleProperty($Element_BorderColor, BorderColor, Actor, $themeable = %true())
$declareStyleProperty($Element_BorderThickness, BorderThickness, Actor, $themeable = %true())
$declareStyleProperty($Element_RoundCorner, RoundCorner, Actor, $themeable = %true())
$declareStyleProperty($Element_Shadowing, Shadowing, Actor, $themeable = %true(), $skinParam = %false())

' Work Object Styles
' ==================================

$declareStyleProperty("", Shape, Object, Card, $themeable = %false(), $skinParam = %false())

$declareStyleProperty("", IconStyle, Object, "outline", $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", IconScale, Object, 0.8, $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", IconColor, Object, modeAdjustedColor("#1f2833"), $themeable = %true(), $skinParam = %false())

$declareStyleProperty($Element_FontColor, FontColor, Object, $themeable = %true())
$declareStyleProperty($Element_FontName, FontName, Object, $themeable = %true())
$declareStyleProperty($Element_FontSize, FontSize, Object, $themeable = %true())
$declareStyleProperty($Element_FontStyle, FontStyle, Object, $themeable = %true())
$declareStyleProperty($Element_TextAlignment, TextAlignment, Object, $themeable = %true())

$declareStyleProperty($Element_BackgroundColor, BackgroundColor, Object, $themeable = %true())
$declareStyleProperty($Element_BorderStyle, BorderStyle, Object, $themeable = %true())
$declareStyleProperty($Element_BorderColor, BorderColor, Object, $themeable = %true())
$declareStyleProperty($Element_BorderThickness, BorderThickness, Object, $themeable = %true())
$declareStyleProperty($Element_RoundCorner, RoundCorner, Object, $themeable = %true())
$declareStyleProperty($Element_Shadowing, Shadowing, Object, $themeable = %true(), $skinParam = %false())

' Boundary Styles
' ==================================

$declareStyleProperty("", Shape, Boundary, Rectangle, $themeable = %false(), $skinParam = %false())

$declareStyleProperty($Element_FontColor, FontColor, Boundary, $themeable = %true())
$declareStyleProperty($Element_FontName, FontName, Boundary, $themeable = %true())
$declareStyleProperty($Element_FontSize, FontSize, Boundary, $themeable = %true())
$declareStyleProperty($Element_FontStyle, FontStyle, Boundary, $themeable = %true())
$declareStyleProperty($Element_TextAlignment, TextAlignment, Boundary, $themeable = %true())

$declareStyleProperty($Element_BackgroundColor, BackgroundColor, Boundary, $themeable = %true())
$declareStyleProperty($Element_BorderStyle, BorderStyle, Boundary, "dashed", $themeable = %true())
$declareStyleProperty($Element_BorderColor, BorderColor, Boundary, modeAdjustedColor("#1f2833"), $themeable = %true())
$declareStyleProperty($Element_BorderThickness, BorderThickness, Boundary, 2, $themeable = %true())
$declareStyleProperty($Element_RoundCorner, RoundCorner, Boundary, 15, $themeable = %true())
$declareStyleProperty($Element_Shadowing, Shadowing, Boundary, $themeable = %true(), $skinParam = %false())

' Note Styles
' ==================================

!global $Note_Shape = Note

$declareStyleProperty($Element_FontColor, FontColor, Note, $themeable = %true())
$declareStyleProperty($Element_FontName, FontName, Note, $themeable = %true())
$declareStyleProperty($Element_FontSize, FontSize, Note, $themeable = %true())
$declareStyleProperty($Element_FontStyle, FontStyle, Note, $themeable = %true())
$declareStyleProperty($Element_TextAlignment, TextAlignment, Note, left, $themeable = %true())

$declareStyleProperty($Element_BackgroundColor, BackgroundColor, Note, modeAdjustedColor("#c5c6c7"), $themeable = %true())
$declareStyleProperty($Element_BorderStyle, BorderStyle, Note, $themeable = %true())
$declareStyleProperty($Element_BorderColor, BorderColor, Note, modeAdjustedColor("#1f2833"), $themeable = %true())
$declareStyleProperty($Element_BorderThickness, BorderThickness, Note, $themeable = %true())
$declareStyleProperty($Element_RoundCorner, RoundCorner, Note, $themeable = %true())
$declareStyleProperty($Element_Shadowing, Shadowing, Note, $themeable = %true(), $skinParam = %false())

' Activity Styles
' ==================================

!global $Activity_Shape = Arrow

$declareStyleProperty("", FontColor, Activity, modeAdjustedColor("#0B0C10"), $themeable = %true())
$declareStyleProperty("", FontName, Activity, $themeable = %true())
$declareStyleProperty("", FontSize, Activity, $themeable = %true())
$declareStyleProperty("", FontStyle, Activity, $themeable = %true())
$declareStyleProperty("", MessageAlignment, Activity, left, $themeable = %true())

$declareStyleProperty("", Color, Activity, modeAdjustedColor("#c5c6c7", "#c5c6c7"), $themeable = %true())

' Step Label Styles
' ----------------------------------

$declareStyleProperty("", LabelPosition, Step, prefix, $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", LabelFraming, Step, round, $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", FontStyle, Step, plain, $themeable = %false(), $skinParam = %false())
$declareStyleProperty("", FontColor, Step, modeAdjustedColor("#0B0C10"), $themeable = %true(), $skinParam = %false())
$declareStyleProperty("", FontSize, Step, 16, $themeable = %true(), $skinParam = %false())

$declareStyleProperty("", BackgroundColor, Step, modeAdjustedColor("#66fcf1"), $themeable = %true(), $skinParam = %false())

' Mutable state
' ##################################

!if $DST_PUML_ENTITY_NAMES == "dynamic"
    !global $dynamicElementNames = "active"
!else
    !global $dynamicElementNames = "inactive"
!endif


' Element Related State
!global $actorCounter = 0
!global $objectCounter = 0
!global $elementCounter = 0

' Activity Related State
!global $stepCounter = 0

!global $lastNodeConnected = ""
!global $splitNode = ""
!global $currentActivityDirection = ""

' Entity Creation
' ##################################

!unquoted function Actor($kind, $icon, $name, $label = "", $tag = "", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !if $DST_PUML_ENTITY_NAMES == "dynamic" || $dynamicElementNames == "active"
        !$tmpLabel = $name
        !$name = $computeNextElementName("Actor")
        !$actorName = $createElement("Actor", $kind, $icon, $name, $tmpLabel, $label, $note, $shape, $scale, $color)
        $createElementNote($name, $tag)
    !else
        !$actorName = $createElement("Actor", $kind, $icon, $name, $label, $tag, $shape, $scale, $color, $background)
        $createElementNote($name, $note)
    !endif

    !return $actorName
!endfunction

!unquoted function Object($kind, $icon, $name, $label = "", $tag = "", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !if $DST_PUML_ENTITY_NAMES == "dynamic" || $dynamicElementNames == "active"
        !$tmpLabel = $name
        !$name = $computeNextElementName("Object")
        !$objectName = $createElement("Object", $kind, $icon, $name, $tmpLabel, $label, $note, $shape, $scale, $color)
        $createElementNote($name, $tag)
    !else
        !$objectName = $createElement("Object", $kind, $icon, $name, $label, $tag, $shape, $scale, $color, $background)
        $createElementNote($name, $note)
    !endif

    !return $objectName
!endfunction

!unquoted procedure introduce($name, $element)
    %set_variable_value($name, $element)
!endprocedure

!unquoted function $createElement($type, $kind, $icon, $name, $label = "", $tag = "", $shape = "", $scale = "", $color = "", $background = "")
    $debug($type + "(" + $kind + ", " + $icon + ") " + $name + " : " + $label + " : " + $tag + " : " + $shape + " : " + $scale + " : " + $color + " : " + $background)

    !if $label == ""
        !$label = $name
    !endif

    !$shape = $getStyleProperty($shape, $type, $kind, $tag, Shape)
    !$scale = $getStyleProperty($scale, $type, $kind, $tag, IconScale)
    !$color = $getStyleProperty($color, $type, $kind, $tag, IconColor)

    !$backgroundColor = $computeColorName($background)
    !$stereotypes = $computeStereotypes($kind, $tag)

    ' output below
    $pumlEntity($shape, $label, $name, $icon, $scale, $color, $stereotypes, $backgroundColor)

    !if $dynamicElementNames == "active"
        !return $name
    !else
        !return ""
    !endif
!endfunction

!function $computeNextElementName($type)
    !$prefix = %lower($type)
    !$counterName = "$" + $prefix + "Counter"

    !$nextValue = %get_variable_value($counterName) + 1
    %set_variable_value($counterName, $nextValue)

    !return $prefix + %string($nextValue)
!endfunction

' Actors
' ##################################

' Person Actor
' ==================================

!global $Person_IconStyle ?= $Actor_IconStyle

!if $Person_IconStyle == "stickman"
    !$Person_Shape ?= "Actor"
    $extendStyleDeclarations("Actor", "Person", "")
    skinparam ActorStyle stickman
!elseif $Person_IconStyle == "stickmanAlt"
    !$Person_Shape ?= "Actor/"
    $extendStyleDeclarations("Actor", "Person", "")
    skinparam ActorStyle stickman
!elseif $Person_IconStyle == "hollow"
    !$Person_Shape ?= "Actor"
    $extendStyleDeclarations("Actor", "Person", "")
    skinparam ActorStyle hollow
!elseif $Person_IconStyle == "awesome"
    !$Person_Shape ?= "Actor"
    $extendStyleDeclarations("Actor", "Person", "")
    skinparam ActorStyle awesome
!elseif $Person_IconStyle == "outline"
    $extendStyleDeclarations("Actor", "Person", "account_outline")
!else
    $extendStyleDeclarations("Actor", "Person", "account")
!endif

!unquoted function Person($name, $label = "", $tag = "", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Actor("Person", $Person_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Group Actor
' ==================================

!global $Group_IconStyle ?= $Actor_IconStyle

!if $Group_IconStyle == "outline"
    $extendStyleDeclarations("Actor", "Group", "account_multiple_outline")
!else
    $extendStyleDeclarations("Actor", "Group", "account_multiple")
!endif

!unquoted function Group($name, $label = "", $tag = "", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Actor("Group", $Group_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' System Actor
' ==================================

$extendStyleDeclarations("Actor", "System", "laptop")

!unquoted function System($name, $label = "", $tag = "", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Actor("System", $System_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Work Objects
' ##################################

' Document Work Object
' ==================================

!global $Document_IconStyle ?= $Object_IconStyle

!if $Document_IconStyle == "outline"
    $extendStyleDeclarations("Object", "Document", "file_document")
!else
    $extendStyleDeclarations("Object", "Document", "document")
!endif

!unquoted function Document($name, $label = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Object("Document", $Document_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Folder Work Object
' ==================================

!global $Folder_IconStyle ?= $Object_IconStyle

!if $Folder_IconStyle == "outline"
    $extendStyleDeclarations("Object", "Folder", "folder_outline")
!else
    $extendStyleDeclarations("Object", "Folder", "folder")
!endif

!unquoted function Folder($name, $label = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Object("Folder", $Folder_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Call Work Object
' ==================================

$extendStyleDeclarations("Object", "Call", "phone")

!unquoted function Call($name, $label = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Object("Call", $Call_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Email Work Object
' ==================================

!global $Email_IconStyle ?= $Object_IconStyle

!if $Email_IconStyle == "outline"
    $extendStyleDeclarations("Object", "Email", "at")
!else
    $extendStyleDeclarations("Object", "Email", "email")
!endif

!unquoted function Email($name, $label = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Object("Email", $Email_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Conversation Work Object
' ==================================

!global $Conversation_IconStyle ?= $Object_IconStyle

!if $Conversation_IconStyle == "outline"
    $extendStyleDeclarations("Object", "Conversation", "message_outline")
!else
    $extendStyleDeclarations("Object", "Conversation", "message")
!endif

!unquoted function Conversation($name, $label = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Object("Conversation", $Conversation_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Info Work Object
' ==================================

!global $Info_IconStyle ?= $Object_IconStyle

!if $Info_IconStyle == "outline"
    $extendStyleDeclarations("Object", "Info", "information_outline")
!else
    $extendStyleDeclarations("Object", "Info", "information")
!endif

!unquoted function Info($name, $label = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "")
    !return Object("Info", $Info_IconName, $name, $label, $tag, $note, $shape, $scale, $color, $background)
!endfunction

' Boundaries
' ##################################

!unquoted procedure Boundary($name, $label = "", $tag = "", $note = "", $shape = "", $background = "")
    !$shape = $getStyleProperty($shape, Boundary, "", $tag, Shape)

    !if $label == ""
        !$label = $name
    !endif

    !if $note
        $shape "==$label" as $name
        $createBoundaryNote($name, $note)
    !endif

    ' output below
    $shape "==$label" as $name $computeStereotypes("", $tag) $computeColorName($background)
!endprocedure

' Activities
' ##################################

!procedure activateComposableActivities($state = "active")
    !global $dynamicElementNames = $state
!endprocedure

' Appending to the Activity Stream
' ----------------------------------

!unquoted procedure startActivity($step, $subject, $predicate, $object, $arrow = "")
    ' Decide on the activity direction
    !if $arrow == ""
        !$arrow = $computeArrowDirection($step)

        !if $arrow
            ' Delete position indicator from $step
            !$step = %substr($step, 1)
        !else
            ' No position indicator was found => follow default story flow
            !$arrow = "-->"
        !endif
    !endif

    $createConnection($subject, $object, $arrow, $predicate, $computeStepLabel($step))

    !global $lastNodeConnected = $object
    !global $currentActivityDirection = $arrow
!endprocedure

!unquoted procedure append($action, $object = "", $arrow = "", $start = "")
    !if $start == ""
        !$start = $lastNodeConnected
    !endif

    !if $arrow == ""
        !$arrow = $currentActivityDirection
    !endif

    ' create connecting arrows
    $createConnection($start, $object, $arrow, $action)

    !global $lastNodeConnected = $object
    !global $currentActivityDirection = $arrow
!endprocedure

!unquoted procedure split($action, $object = "", $arrow = "")
    !global $splitNode = $lastNodeConnected
    append($action, $object, $arrow)
!endprocedure

!unquoted procedure continue($action, $object = "", $arrow = "")
    append($action, $object, $arrow, $splitNode)
!endprocedure

' Prepending to the Activity Stream
' ----------------------------------

!unquoted procedure prepend($start, $action = "", $arrow = "", $end = "")
    !if $end == ""
        !$end = $lastStartName
    !endif

    !if $arrow == ""
        !$arrow = $currentActivityDirection
    !endif

    $createConnection($start, $end, $arrow, $action)

    !global $lastStartName = $start
    !global $currentActivityDirection = $arrow
!endprocedure

!unquoted procedure terminateActivity($step, $subject, $predicate, $arrow = "", $object = "")
    !if $object == ""
        !$object = $lastNodeConnected
    !endif

    !if $arrow == ""
        !$arrow = $currentActivityDirection
    !endif

    $createConnection($subject, $object, $arrow, $predicate, $computeStepLabel($step))
!endprocedure

' Classic Activity Definition
' ----------------------------------

!unquoted procedure activity($step, $subject, $predicate, $object, $post = "", $target = "", $objectArr = "", $targetArr = "", $tag="", $note = "", $shape = "", $scale = "", $color = "", $background = "", $targetTag="", $targetNote = "", $targetShape = "", $targetScale = "", $targetColor = "", $targetBackground = "")
    ' Handle first connection between subject and object
    !$object = $ensureElementExists($object, $tag, $note, $shape, $scale, $color, $background)

    startActivity($step, $subject, $predicate, $object, $objectArr)

    ' Handle possible second connection between object and target
    !if $target && $target != "_"
        !$target = $ensureElementExists($target, $targetTag, $targetNote, $targetShape, $targetScale, $targetColor, $targetBackground)

        append($post, $target, $targetArr)
    !elseif $post && $post != "_"
        !$target = $ensureElementExists($post, $targetTag, $targetNote, $targetShape, $targetScale, $targetColor, $targetBackground)

        append("", $target, $targetArr)
    !endif
!endprocedure

' Activity Helpers
' ----------------------------------

!procedure $createConnection($from, $to, $arrow = "-->", $action = "", $stepLabel = "")
    !$backwardsArrow = %substr($arrow, 0, 1) == "<"
    !if $action && $action != "_"
        !if $stepLabel
            !if $backwardsArrow
                !if $Step_LabelPosition == "tail"
                    $to $arrow "$stepLabel" $from : $action
                !elseif $Step_LabelPosition == "combined"
                    $to $arrow $from : $action $stepLabel
                !else
                    $to $arrow $from : $stepLabel $action
                !endif
            !else
                !if $Step_LabelPosition == "tail"
                    $from "$stepLabel" $arrow $to : $action
                !else
                    $from $arrow $to : $stepLabel $action
                !endif
            !endif
        !else
            !if $backwardsArrow
                $to $arrow $from : $action
            !else
                $from $arrow $to : $action
            !endif
        !endif
    !else
        !if $backwardsArrow
            $to $arrow $from
        !else
            $from $arrow $to
        !endif
    !endif
!endprocedure

' Be aware this function might produce side effects
!function $ensureElementExists($element, $tag, $note, $shape, $scale, $color, $background)
    !$separatorPosition = %strpos($element, ":")

    !if $separatorPosition > -1
        !$elementCounter = $elementCounter + 1

        !$elementKind = %substr($element, 0, $separatorPosition)
        !$elementLabel = %substr($element, $separatorPosition + 1)
        !$elementName = $elementKind + $elementCounter

        'Element($kind, $name, $label, $tag, $note, $shape, $scale, $color, $background)
        %call_user_func($elementKind, $elementName, $elementLabel, $tag, $note, $shape, $scale, $color, $background)

        !return $elementName
    !else
        $createElementNote($element, $note)

        !return $element
    !endif
!endfunction

' Notes
' ##################################

!procedure $createElementNote($reference, $note)
    !if $note
        !$notePosition = %substr($note, 0, 1)
        !$noteText = %substr($note, 1)

        !if $notePosition == "^"
            note top of $reference : $noteText
        !elseif $notePosition == ">"
            note right of $reference : $noteText
        !elseif $notePosition == "v"
            note bottom of $reference : $noteText
        !elseif $notePosition == "<"
            note left of $reference : $noteText
        !elseif $notePosition == "~"
            !if $Story_Layout == "left-to-right"
                note left of $reference : $noteText
            !else
                note top of $reference : $noteText
            !endif
        !else
            !if $Story_Layout == "left-to-right"
                note right of $reference : $note
            !else
                note bottom of $reference : $note
            !endif
        !endif
    !endif
!endprocedure

!procedure $createBoundaryNote($reference, $note)
    !if $note
        !$notePosition = %substr($note, 0, 1)
        !$noteText = %substr($note, 1)

        !if $notePosition == "^"
            !if $Story_Layout == "left-to-right"
                note bottom of $reference : $noteText
            !else
                note top of $reference : $noteText
            !endif
        !elseif $notePosition == ">"
            note right of $reference : $noteText
        !elseif $notePosition == "v"
            !if $Story_Layout == "left-to-right"
                note top of $reference : $noteText
            !else
                note bottom of $reference : $noteText
            !endif
        !elseif $notePosition == "<"
            note left of $reference : $noteText
        !elseif $notePosition == "~"
            !if $Story_Layout == "left-to-right"
                note left of $reference : $noteText
            !else
                note top of $reference : $noteText
            !endif
        !else
            !if $Story_Layout == "left-to-right"
                note right of $reference : $note
            !else
                note bottom of $reference : $note
            !endif
        !endif
    !endif
!endprocedure

' Helper functions
' ##################################

!function $computeColorName($colorSpec)
    !if $colorSpec
        !$hexColor = %substr($colorSpec, 0, 1)
        !if $hexColor == "#"
            !return $colorSpec
        !else
            !return "#" + $colorSpec
        !endif
    !else
        !return ""
    !endif
!endfunction

!function $computeArrowDirection($step)
    !$activityDirection = %substr($step, 0, 1)
    !if $activityDirection == "^"
        !if $Story_Layout == "left-to-right"
            !return "<-"
        !else
            !return "<--"
        !endif
    !elseif $activityDirection == ">"
        !if $Story_Layout == "left-to-right"
            !return "-->"
        !else
            !return "->"
        !endif
    !elseif $activityDirection == "<"
        !if $Story_Layout == "left-to-right"
            !return "<--"
        !else
            !return "<-"
        !endif
    !elseif  $activityDirection == "v"
        !if $Story_Layout == "left-to-right"
            !return "->"
        !else
            !return "-->"
        !endif
    !elseif  $activityDirection == "~"
        !return "<--"
    !else
        ' Signal no direction found
        !return %false()
    !endif
!endfunction

!function $computeStepLabel($step)
    !$stepNumber = $computeStepNumber($step)

    !if $stepNumber
        !if $Step_LabelFraming == "round"
            !$result = "(" + $stepNumber + ")"
        !elseif $Step_LabelFraming == "square"
            !$result = "[" + $stepNumber + "]"
        !elseif $Step_LabelFraming == "curly"
            !$result = "{" + $stepNumber + "}"
        !elseif $Step_LabelFraming == "pointy"
            !$result = "〈" + $stepNumber + "〉"
        !else
            !$result = $stepNumber
        !endif

        !if $Step_FontStyle == "bold"
            !$result = "**" + $result + "**"
        !elseif $Step_FontStyle == "italic"
            !$result = "//" + $result + "//"
        !elseif $Step_FontStyle == "monospace"
            !$result = '""' + $result + '""'
        !elseif $Step_FontStyle == "underline"
            !$result = "__" + $result + "__"
        !elseif $Step_FontStyle == "wave"
            !$result = "~~" + $result + "~~"
        !endif

        !if $Step_FontColor
            !$result = "<color:" + $Step_FontColor + ">" + $result + "</color>"
        !endif
        !if $Step_FontSize
            !$result = "<size:" + $Step_FontSize + ">" + $result + "</size>"
        !endif
        !if $Step_BackgroundColor
            !$result = "<back:" + $Step_BackgroundColor + ">" + $result + "</back>"
        !endif
        !return $result
    !else
        !return ""
    !endif
!endfunction

!function $computeStepNumber($step)
    !if $step == "_" || $step == "+"
        !$stepCounter = $stepCounter + 1
        !return $stepCounter
    !elseif $step == "|"
        !if $stepCounter
            !return $stepCounter
        !else
            !return '?'
        !endif
    !elseif %substr($step, 0, 1) == "="
        !$stepCounter = %intval(%substr($step, 1))
        !return $stepCounter
    !elseif $step == "."
        ' Signal unnumbered step
        !return %false()
    !else
        !return $step
    !endif
!endfunction
